*Write a program that will calculate the number of trailing zeros in a factorial of a given number.

N! = 1 * 2 * 3 * ... * N

Be careful 1000! has 2568 digits...

For more info, see: http://mathworld.wolfram.com/Factorial.html

Examples
zeros(6) = 1
# 6! = 1 * 2 * 3 * 4 * 5 * 6 = 720 --> 1 trailing zero

zeros(12) = 2
# 12! = 479001600 --> 2 trailing zeros*

```
以下代码性能低 算法效率低
function zeros (n) {

 function factorial (num) { 
    if (num < 0) { 
        return -1; 
    } else if (num === 0 || num === 1) { 
        return 1; 
    } else { 
        return (num * factorial(num - 1)); 
    } 
}
var N = factorial(n)
var a=0
while(N%10==0){
  a++
  N=Math.floor(N%10)
}
return a
}
```

```
ES6 改进
function zeros (n) {

 var exponent = Math.floor(Math.log(n)/Math.log(5));
  var sum=0;
  for(var i=1; i<=exponent; i++){
    var num=Math.pow(5,i);
    sum+=Math.floor(n/num);
  }
  return sum;
}
```
